[project]
name = "{{module_name}}"
version = "0.1.0"
description = "{{description}}"
readme = "README.md"
authors = [
    { name = "{{ user_name | title }}", email = "{{ user_email }}" }
]

# Public libraries should be more lenient
# Internal stuff should enforce ~=3.13.0!
requires-python = ">={{python_version}}"
dependencies = [
    "pydantic>=2.10.4",
]

[dependency-groups]
dev = [
    "poethepoet>=0.32.0",
    "pyright>=1.1.391",
    "pytest>=8.3.4",
    "pytest-xdist>=3.7.0",
    "pytest-cov>=6.2.1",
    "coverage>=7.10.4",
    "ruff>=0.8.5",
    {% if include_precommit%}"pre-commit>=0.0.0",{% endif %}
    {% if use_commitizen %}"commitizen>=4.2.1",{% endif %}
    {% if include_mkdocs -%}"mkdocs>=0.0.0",
    "mkdocs-git-revision-date-localized-plugin>=0.0.0",
    "mkdocs-glightbox>=0.0.0",
    "mkdocs-material>=0.0.0",
    "mkdocs-minify-plugin>=0.0.0",
    "mkdocs-redirects>=0.0.0",
    "pymdown-extensions>=0.0.0",
    {%- endif %}
]


[build-system]
requires = ["uv_build>=0.8.2,<0.9.0"]
build-backend = "uv_build"

[project.scripts]
# running `{{ module_name }}` will run the `{{ module_name }}.main` function
{{ module_name }} = "{{ module_name }}.hello:main"

[tool.poe.tasks]
# setup
_setup_git = {shell = 'git rev-parse --is-inside-work-tree >/dev/null 2>&1 || (git init && echo "Successfully initialized git!")'}
{%- if include_precommit %}
_setup_precommit_install = { cmd = "pre-commit install", help = "Installs pre-commit hooks locally." }
_setup_precommit_autoupdate = { cmd = "pre-commit autoupdate -j0", help = "Auto-updates pre-commit hooks." }
{% endif -%}

{%- if use_commitizen %}
_setup_commitizen = { cmd = "cz init", help = "Initializes Commitizen configuration." }
{% endif -%}

{# This block is purely for variable assignment and should produce no newlines. #}
{%- set setup_dependencies = ["_setup_git", "update"] -%}
{%- if include_precommit -%}
  {%- set setup_dependencies = setup_dependencies + ["_setup_precommit_install", "_setup_precommit_autoupdate"] -%}
{%- endif -%}
{%- if use_commitizen -%}
  {%- set setup_dependencies = setup_dependencies + ["_setup_commitizen"] -%}
{%- endif -%}

{#
Only render the 'setup' task if there are actual dependencies for it.
This implicitly means either pre-commit or commitizen (or both) are included.
#}
{%- if setup_dependencies | length > 0 %}
setup = { cmd = "echo 'Project setup complete!'", deps = {{ setup_dependencies | tojson }}, help = "Performs initial project setup (e.g., installs pre-commit hooks, initializes commitizen)." }
{%- endif -%}

# update
# Hidden update tasks
_update_python_deps = { cmd = "uv sync --upgrade", help = "Updates Python dependencies using uv." }
_update_uv_bump = { cmd = "uvx uv-bump", help = "Updates project version using uv-bump." }

{%- set update_sequence = [] -%}
{%- if include_precommit -%}
  {%- set update_sequence = update_sequence + ["_setup_precommit_autoupdate"] -%}
{%- endif -%}
{%- set update_sequence = update_sequence + ["_update_python_deps", "_update_uv_bump"] -%}

{#
The 'update' task is always useful, but its sequence can be conditional.
It will always include uv sync --upgrade and uvx uv-bump.
pre-commit autoupdate is conditional.
#}
update = { sequence = {{ update_sequence | tojson }}, help = "Updates project dependencies and tools (pre-commit, Python packages, uv-bump)." }

# run with eg `uv run poe fmt`
fmt = { cmd = "ruff format", help = "Formats Python code using Ruff." }
lint = { cmd = "ruff check --fix", help = "Lints and fixes Python code using Ruff." }
check = { cmd = "pyright", help = "Performs static type checking with Pyright." }
test = { cmd = "pytest", help = "Runs project tests using pytest." }

# Using sequence to ensure they run in order
all = { sequence = ["fmt", "lint", "check", "test"], help = "Runs all development checks: format, lint, type check, and tests." }

"ci:fmt" = { cmd = "ruff format --check", help = "Checks if code is formatted without making changes (for CI)." } # fail if not formatted
"ci:lint" = { cmd = "ruff check", help = "Lints code without applying fixes (for CI)." }

[tool.ruff]
# if this is a library, enter the _minimum_ version you
# want to support, otherwise do py313
target-version = "py313"
line-length = 80  # use whatever number makes you happy

[tool.ruff.lint]
# you can see the looong list of rules here:
# https://docs.astral.sh/ruff/rules/
# here's a couple to start with
select = [
  "A",    # warn about shadowing built-ins
  "E",    # style stuff, whitespaces
  "F",    # important pyflakes lints
  "I",    # import sorting
  "N",    # naming
  "T100", # breakpoints (probably don't want these in prod!)
]
# if you're feeling confident you can do:
# select = ["ALL"]
# and then manually ignore annoying ones:
# ignore = [...]

[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["{{ module_name }}"]

[tool.pyright]
venvPath = "."          # uv installs the venv in the current dir
venv = ".venv"          #       in a folder called `.venv`
strict = ["**/*.py"]    # use 'strict' checking on all files
pythonVersion = "3.13"  # if library, specify the _lowest_ you support

[tool.pytest.ini_options]
addopts = "--doctest-modules --numprocesses=auto --cov=src/{{ module_name }} --cov-report=term-missing --cov-report=json"
testpaths = [
    "tests",
]
